name: Build Windows Executable

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    # Using Linux with Nix for cross-compilation instead of Windows
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Nix
      uses: cachix/install-nix-action@v23
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
          substituters = https://cache.nixos.org/ https://hydra.iohk.io
    
    - name: Setup Cachix
      uses: cachix/cachix-action@v12
      with:
        name: iohk
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    
    - name: Create default.nix for building
      run: |
        cat > default.nix << 'EOF'
        { pkgs ? import <nixpkgs> {} }:

        let
          haskellPackages = pkgs.haskellPackages.override {
            overrides = self: super: {
              # Dependencies from Hackage
              UISF = self.callHackage "UISF" "0.4.0.0" {};
              HSoM = self.callHackage "HSoM" "1.0.0" {};
              
              # Our project
              euterpea2-project = self.callCabal2nix "euterpea2-project" ./. {};
            };
          };
          
          # Build Windows version
          windowsPackages = pkgs.pkgsCross.mingwW64.haskellPackages.override {
            overrides = self: super: {
              # Dependencies from Hackage
              UISF = self.callHackage "UISF" "0.4.0.0" {};
              HSoM = self.callHackage "HSoM" "1.0.0" {};
              
              # Our project, adding SDL2 dependencies
              euterpea2-project = (self.callCabal2nix "euterpea2-project" ./. {}).overrideAttrs (oldAttrs: {
                buildInputs = (oldAttrs.buildInputs or []) ++ [ 
                  pkgs.pkgsCross.mingwW64.SDL2
                  pkgs.pkgsCross.mingwW64.SDL2_ttf 
                ];
              });
            };
          };
          
          # Create Windows distributable package
          windowsDistributable = pkgs.stdenv.mkDerivation {
            name = "JustIntonationMusic-windows";
            src = ./.;
            buildInputs = [
              windowsPackages.euterpea2-project
              pkgs.pkgsCross.mingwW64.SDL2
              pkgs.pkgsCross.mingwW64.SDL2_ttf
            ];
            buildPhase = '''';
            installPhase = ''
              mkdir -p $out/bin
              cp ${windowsPackages.euterpea2-project}/bin/euterpea2-project.exe $out/bin/JustIntonationMusic.exe
              cp ${pkgs.pkgsCross.mingwW64.SDL2}/bin/SDL2.dll $out/bin/
              cp ${pkgs.pkgsCross.mingwW64.SDL2_ttf}/bin/SDL2_ttf.dll $out/bin/
              cp $src/WINDOWS_README.md $out/bin/README.md
            '';
          };
        in {
          inherit haskellPackages;
          inherit windowsPackages;
          inherit windowsDistributable;
          windows = windowsDistributable;
        }
        EOF
    
    - name: Build with Nix
      run: |
        # Build the Windows distributable package
        nix-build -A windows
    
    - name: Create distribution directory
      run: |
        mkdir -p dist/windows
        cp -r result/bin/* dist/windows/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: JustIntonationMusic
        path: dist/windows/
